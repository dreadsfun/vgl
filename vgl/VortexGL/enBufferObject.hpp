#ifndef __EN_BUFFER_OBJECT_HPP
#define __EN_BUFFER_OBJECT_HPP

#include <glew/glew.h>
#include <gl/GL.h>

namespace vortex {
	namespace renderer {
		enum Access {
			READ_ONLY = GL_READ_ONLY,
			WRITE_ONLY = GL_WRITE_ONLY,
			READ_WRITE = GL_READ_WRITE
		};

		enum StorageUsage {
			DYNAMIC_STORAGE_BIT = GL_DYNAMIC_STORAGE_BIT,
			MAP_READ_BIT = GL_MAP_READ_BIT,
			MAP_WRITE_BIT = GL_MAP_WRITE_BIT,
			MAP_PERSISTENT_BIT = GL_MAP_PERSISTENT_BIT,
			MAP_COHERENT_BIT = GL_MAP_COHERENT_BIT,
			CLIENT_STORAGE_BIT = GL_CLIENT_STORAGE_BIT
		};

		enum Usage {
			USAGE_STREAM_DRAW = GL_STREAM_DRAW,
			USAGE_STREAM_READ = GL_STREAM_READ,
			USAGE_STREAM_COPY = GL_STREAM_COPY,
			USAGE_STATIC_DRAW = GL_STATIC_DRAW,
			USAGE_STATIC_READ = GL_STATIC_READ,
			USAGE_STATIC_COPY = GL_STATIC_COPY,
			USAGE_DYNAMIC_DRAW = GL_DYNAMIC_DRAW,
			USAGE_DYNAMIC_READ = GL_DYNAMIC_READ,
			USAGE_DYNAMIC_COPY = GL_DYNAMIC_COPY
		};

		enum BufferParameter {
			BUFFER_ACCESS = GL_BUFFER_ACCESS,
			BUFFER_MAPPED = GL_BUFFER_MAPPED,
			BUFFER_SIZE = GL_BUFFER_SIZE,
			BUFFER_USAGE = GL_BUFFER_USAGE
		};

		enum BufferTarget {
			ATOMIC_COUNTER_BUFFERi = GL_ATOMIC_COUNTER_BUFFER,
			TRANSFORM_FEEDBACK_BUFFERi = GL_TRANSFORM_FEEDBACK_BUFFER,
			UNIFORM_BUFFERi = GL_UNIFORM_BUFFER,
			SHADER_STORAGE_BUFFERi = GL_SHADER_STORAGE_BUFFER,

			ARRAY_BUFFER = GL_ARRAY_BUFFER,
			COPY_READ_BUFFER = GL_COPY_READ_BUFFER,
			COPY_WRITE_BUFFER = GL_COPY_WRITE_BUFFER,
			DRAW_INDIRECT_BUFFER = GL_DRAW_INDIRECT_BUFFER,
			DISPATCH_INDIRECT_BUFFER = GL_DISPATCH_INDIRECT_BUFFER,
			ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER,
			PIXEL_PACK_BUFFER = GL_PIXEL_PACK_BUFFER,
			PIXEL_UNPACK_BUFFER = GL_PIXEL_UNPACK_BUFFER,
			QUERY_BUFFER = GL_QUERY_BUFFER,
			TEXTURE_BUFFER = GL_TEXTURE_BUFFER
		};

		enum PixelDataFormat {
			DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
			STENCIL_INDEX = GL_STENCIL_INDEX,
			DEPTH_STENCIL = GL_DEPTH_STENCIL,

			RED = GL_RED,
			GREEN = GL_GREEN,
			BLUE = GL_BLUE,
			RG = GL_RG,
			RGB = GL_RGB,
			RGBA = GL_RGBA,
			BGR = GL_BGR,
			BGRA = GL_BGRA,

			RED_INTEGER = GL_RED_INTEGER,
			GREEN_INTEGER = GL_GREEN_INTEGER,
			BLUE_INTEGER = GL_BLUE_INTEGER,
			RG_INTEGER = GL_RG_INTEGER,
			RGB_INTEGER = GL_RGB_INTEGER,
			RGBA_INTEGER = GL_RGBA_INTEGER,
			BGR_INTEGER = GL_BGR_INTEGER,
			BGRA_INTEGER = GL_BGRA_INTEGER
		};
	}
}
#endif